{"version":3,"sources":["utils/api.js","redux/actions/actionTypes.js","redux/actions/actions.js","components/TableRow/index.js","components/TableRow/TableRow.js","components/InfoForm/index.js","components/InfoForm/InfoForm.js","utils/localStorage.js","utils/constants.js","components/Pagination/index.js","components/Pagination/Pagination.js","App.js","reportWebVitals.js","redux/reducers/initialData.js","redux/reducers/infoFormState.js","redux/reducers/filterValues.js","redux/reducers/sortValues.js","redux/rootReducer.js","redux/reducers/currentPage.js","redux/provider.js","index.js"],"names":["handleOriginalResponse","res","ok","json","Promise","reject","status","SET_Initial_Data","SET_Form_State","SET_Filter_Values","SET_Current_Page","SET_Sort_Values","setCurrentPage","page","type","aTypes","payload","setSortValues","v","TableRow","data","onClick","id","firstName","lastName","email","phone","adress","className","state","InfoForm","description","zip","city","streetAddress","checkLocalStorage","key","localStorage","getItem","getFromLocalStorage","JSON","parse","dataKey","Pagination","currentPage","name","map","i","value","App","dispatch","useDispatch","useSelector","initialData","formValues","infoFormState","filterValues","sortValues","useEffect","fetch","method","mode","then","item","setItem","stringify","catch","err","console","log","Chevron","column","ascending","resultDataArray","array","sort","a","b","aPath","bPath","includes","split","sortedResult","filter","filteredByState","search","toLowerCase","rows","length","totalPages","Math","ceil","handleChange","e","target","handleSorting","autoComplete","onChange","states","forEach","Object","keys","getStates","border","entries","slice","d","parseInt","pages","push","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","handleChangeValues","action","combineReducers","store","createStore","rootReducer","applyMiddleware","next","result","getState","ProviderBox","props","children","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.706993e2.chunk.js","sourcesContent":["const url = \"https://itrex-react-lab-files.s3.eu-central-1.amazonaws.com/react-test-api.json\"\r\n\r\nconst handleOriginalResponse = (res) => {\r\n    if (!res.ok) {\r\n        return Promise.reject(`Error: ${res.status}`);\r\n    }\r\n    return res.json();\r\n};\r\n\r\nexport const getData = () => fetch(url, {\r\n    method: \"GET\",\r\n    mode: \"cors\",\r\n}).then(handleOriginalResponse);\r\n","export const SET_Initial_Data = 'SET_Initial_Data';\r\nexport const SET_Form_State = 'SET_Form_State'\r\nexport const SET_Filter_Values = 'SET_Filter_Values'\r\nexport const SET_Current_Page = 'SET_Current_Page'\r\nexport const SET_Sort_Values = 'SET_Sort_Values'\r\n","import * as aTypes from \"./actionTypes\";\r\n\r\nexport const setInitialData = (value) => ({\r\n    type: aTypes.SET_Initial_Data,\r\n    payload: value,\r\n});\r\n\r\n\r\nexport const setInfoFormData = (value) => ({\r\n    type: aTypes.SET_Form_State,\r\n    payload: value,\r\n});\r\n\r\nexport const setFilterValues = (v) => ({\r\n    type: aTypes.SET_Filter_Values,\r\n    payload: v\r\n})\r\n\r\nexport const setCurrentPage = (page) => ({\r\n    type: aTypes.SET_Current_Page,\r\n    payload: page\r\n})\r\n\r\nexport const setSortValues = (v) => ({\r\n    type: aTypes.SET_Sort_Values,\r\n    payload: v\r\n})\r\n\r\n","import TableRow from \"./TableRow\";\r\n\r\nexport default TableRow\r\n","import './TableRow.css'\r\n\r\nconst TableRow = ({data, onClick}) => {\r\n\r\n    const {id, firstName, lastName, email, phone, adress} = data\r\n    const handleClick = () => {\r\n        onClick(data)\r\n    }\r\n    return (\r\n        <tr onClick={handleClick} className={'table-row'}>\r\n            <td>{id}</td>\r\n            <td>{firstName}</td>\r\n            <td>{lastName}</td>\r\n            <td>{email}</td>\r\n            <td>{phone}</td>\r\n            <td>{adress.state}</td>\r\n        </tr>\r\n    )\r\n}\r\n\r\nexport default TableRow\r\n","import InfoForm from \"./InfoForm\";\r\n\r\nexport default InfoForm\r\n","import './InfoForm.css'\r\n\r\nconst InfoForm = ({data}) => {\r\n    const {adress, description, firstName, lastName} = data\r\n    const {zip, state, city, streetAddress} = adress\r\n    return (\r\n        <div className={'infoForm'}>\r\n            <h3>Profile info: </h3>\r\n            <ul className={'infoForm__list'}>\r\n                <li className={'infoForm__li'}><span>Selected profile:</span> {firstName + ' ' + lastName}</li>\r\n                <li className={'infoForm__li'}><span>Description: </span> {description}</li>\r\n                <li className={'infoForm__li'}><span>Address: </span> {streetAddress}</li>\r\n                <li className={'infoForm__li'}><span>City: </span> {city}</li>\r\n                <li className={'infoForm__li'}><span>State: </span> {state}</li>\r\n                <li className={'infoForm__li'}><span>Index: </span> {zip}</li>\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default InfoForm\r\n","export function checkLocalStorage(key) {\r\n    return !!localStorage.getItem(key)\r\n}\r\n\r\nexport function getFromLocalStorage(key) {\r\n    return JSON.parse(localStorage.getItem(key))\r\n}\r\n\r\nexport function setLocalStorage(key, item) {\r\n    localStorage.setItem(key, JSON.stringify(item))\r\n}\r\n\r\nexport function initialValuesFromLS(key, initValues) {\r\n    return checkLocalStorage(key) ? getFromLocalStorage(key) : initValues\r\n}\r\n","export const dataKey = 'data'\r\nexport const rowsPerPage = 20\r\n","import Pagination from './Pagination'\r\n\r\nexport default Pagination\r\n","import './Pagination.css'\r\n\r\nconst Pagination = ({data, onClick, currentPage}) => {\r\n    return (\r\n        <ul className={'pagination'}>\r\n            <li className={'pagination__li'}>\r\n                <button className={'pagination__button'} onClick={onClick} name={'previousPage'}>Previous</button>\r\n            </li>\r\n            {data.map(i => <li className={'pagination__li'}>\r\n                <button className={`pagination__button ${currentPage === i ? 'active' : ''}`} value={i}\r\n                        onClick={onClick} name={`page-${i}`}>{i}</button>\r\n            </li>)}\r\n            <li className={'pagination__li'}>\r\n                <button className={'pagination__button'} onClick={onClick} name={'nextPage'}>Next</button>\r\n            </li>\r\n        </ul>\r\n    )\r\n}\r\n\r\nexport default Pagination\r\n","import './App.css';\nimport {useEffect} from \"react\";\nimport * as api from './utils/api'\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {setInitialData, setInfoFormData, setFilterValues, setCurrentPage, setSortValues} from \"./redux/actions/actions\";\nimport TableRow from \"./components/TableRow\";\nimport InfoForm from \"./components/InfoForm\";\nimport {checkLocalStorage, setLocalStorage} from \"./utils/localStorage\";\nimport {dataKey, rowsPerPage} from \"./utils/constants\";\nimport Pagination from \"./components/Pagination\";\n\nfunction App() {\n    const dispatch = useDispatch()\n    const data = useSelector((state) => state.initialData)\n    const formValues = useSelector((state) => state.infoFormState)\n    const currentPage = useSelector((state) => state.currentPage)\n    const filterValues = useSelector((state) => state.filterValues)\n    const sortValues = useSelector((state) => state.sortValues)\n\n    useEffect(() => {\n        if (!checkLocalStorage(dataKey)) {\n            api\n                .getData()\n                .then(res => {\n                    dispatch(setInitialData(res))\n                    setLocalStorage(dataKey, res)\n                })\n                .catch(err => console.log(err));\n        }\n    }, [])\n\n\n    const filteredByName = (array) => array.filter((item) => {\n        const search = filterValues.name.toLowerCase();\n        const firstName = item.firstName === null ? 'null' : item.firstName.toLowerCase();\n        const lastName = item.lastName === null ? 'null' : item.lastName.toLowerCase();\n        return (firstName && true && firstName.includes(search)) || (lastName && true && lastName.includes(search))\n            ? item\n            : console.log('nothing found')\n            ;\n    });\n\n    const getStates = (data) => {\n        let states = {}\n        data.forEach(i => {\n            states[i.adress.state] = i.adress.state\n        })\n        return Object.keys(states).sort((a, b) => a - b)\n    }\n\n    const filteredByState = (array) => array.filter(item => {\n        const {state} = filterValues\n        if (state && state !== '') return item.adress.state === state\n        return item\n    })\n\n    const sortedResult = (array) => array.sort(function (a, b) {\n        const {column, ascending} = sortValues\n        let aPath\n        let bPath\n        if (column.includes('.')) {\n            aPath = a[column.split('.')[0]][column.split('.')[1]]\n            bPath = b[column.split('.')[0]][column.split('.')[1]]\n        } else {\n            aPath = a[column]\n            bPath = b[column]\n        }\n        if (aPath > bPath) {\n            return ascending ? 1 : -1;\n        }\n        if (aPath < bPath) {\n            return ascending ? -1 : 1;\n        }\n        // a === b\n        return 0;\n    })\n\n    //ascending a -> z, descending z -> a\n    const Chevron = ({id}) => {\n        const {column, ascending} = sortValues\n        const qt = id === column ? ascending : false;\n        return qt ? <span>&#9650;</span> : <span>&#9660;</span>\n    }\n\n    const resultDataArray = () => {\n        const f1 = filteredByName(data)\n        const f2 = filteredByState(f1)\n        return sortedResult(f2)\n\n    }\n\n    const rows = resultDataArray().length;\n    const totalPages = Math.ceil(rows / rowsPerPage);\n\n    const visibleDataArray = () =>\n        resultDataArray().slice((currentPage - 1) * rowsPerPage, currentPage * rowsPerPage)\n\n\n    const pages = () => {\n        let pages = []\n        for (let i = 1; i <= totalPages; i++) {\n            pages.push(i)\n        }\n        return pages\n    }\n\n    const handleChange = (e) => {\n        const {value, name} = e.target\n        dispatch(setFilterValues({value, name}))\n    }\n\n    const handleSorting = (e) => {\n        const {id} = e.target\n        const {column, ascending} = sortValues\n        if (column === id) dispatch(setSortValues({ascending: !ascending, column: id}))\n        else dispatch(setSortValues({ascending: true, column: id}))\n    }\n\n    const handlePageChange = (e) => {\n        const {value, name} = e.target\n        if (name === 'previousPage') {\n            let newPage = currentPage === 1 ? currentPage : (currentPage - 1)\n            dispatch(setCurrentPage(newPage))\n        }\n        if (name === 'nextPage') {\n            let newPage = currentPage < totalPages ? currentPage + 1 : currentPage\n            dispatch(setCurrentPage(newPage))\n        } else if (name.includes('page')) {\n            dispatch(setCurrentPage(parseInt(value)))\n        }\n    }\n\n    return (\n        <div className={'page'}>\n            <div className={'app'}>\n                <label className={'app__search'}>Search by name: <input type=\"text\" name={'name'}\n                                                                        autoComplete={'off'}\n                                                                        className={'app__search_input'}\n                                                                        onChange={handleChange}/></label>\n                <label className={'app__state'}>Filter by state:\n                    <select name={'state'} onChange={handleChange} className={'app__state_input'}>\n                        <option value={''}>---</option>\n                        {getStates(data).map(i => <option value={i}>{i}</option>)}\n                    </select>\n                </label>\n                <table border={1} className={'app__table'}>\n                    <thead>\n                    <tr>\n                        {\n                            Object.entries({\n                                'id': 'Id',\n                                'firstName': 'First Name',\n                                'lastName': 'Last Name',\n                                'email': 'Email',\n                                'phone': 'Phone',\n                                'adress.state': 'State'\n                            })\n                                .map(([key, value]) =>\n                                    <td onClick={handleSorting} id={key}>{value} <Chevron id={key}/></td>\n                                )}\n                    </tr>\n                    </thead>\n                    <tbody>\n                    {\n                        visibleDataArray()\n                            .map(d =>\n                                <TableRow key={d.id + d.firstName} data={d} onClick={(v) => {\n                                    dispatch(setInfoFormData(v))\n                                }}/>\n                            )\n                    }\n                    </tbody>\n                </table>\n                <div className={'app__pagination'}><Pagination onClick={handlePageChange} data={pages()}\n                                                               currentPage={currentPage}/></div>\n                <div className={'app__infoForm'}><InfoForm data={formValues}/></div>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {SET_Initial_Data} from \"../actions/actionTypes\";\r\nimport {checkLocalStorage, getFromLocalStorage} from \"../../utils/localStorage\";\r\nimport {dataKey} from \"../../utils/constants\";\r\n\r\nconst initialState = checkLocalStorage(dataKey) ? getFromLocalStorage(dataKey) : [];\r\n\r\nexport default function initialData(state = initialState, action) {\r\n    switch (action.type) {\r\n        case SET_Initial_Data:\r\n            return action.payload;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n","import {SET_Form_State} from \"../actions/actionTypes\";\r\n\r\nconst initialState = {\r\n    description: 'Description',\r\n    email: 'email@email.com',\r\n    firstName: 'First Name',\r\n    lastName: 'Last Name',\r\n    phone: '(999)999-9999',\r\n    adress: {\r\n        city: \"City\",\r\n        state: \"State\",\r\n        streetAddress: \"Street\",\r\n        zip: \"00000\"\r\n    }\r\n};\r\n\r\nexport default function infoFormState(state = initialState, action) {\r\n    switch (action.type) {\r\n        case SET_Form_State:\r\n            return action.payload;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","import {SET_Filter_Values} from \"../actions/actionTypes\";\r\n\r\n\r\nconst initialState = {\r\n    name: '',\r\n    state: ''\r\n}\r\n\r\nconst handleChangeValues = (state, action) => {\r\n    const {value, name} = action.payload\r\n    return {...state, [name]: value}\r\n}\r\nexport default function filterValues(state = initialState, action) {\r\n    switch (action.type) {\r\n        case SET_Filter_Values:\r\n            return handleChangeValues(state, action);\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","import {SET_Sort_Values} from \"../actions/actionTypes\";\r\n\r\n\r\nconst initialState = {\r\n    ascending: true,\r\n    column: 'id'\r\n};\r\n\r\nexport default function sortValues(state = initialState, action) {\r\n    switch (action.type) {\r\n        case SET_Sort_Values:\r\n            return action.payload;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","import {combineReducers} from \"redux\";\r\nimport initialData from \"./reducers/initialData\";\r\nimport infoFormState from './reducers/infoFormState'\r\nimport filterValues from './reducers/filterValues'\r\nimport currentPage from \"./reducers/currentPage\";\r\nimport sortValues from './reducers/sortValues'\r\n\r\nexport default combineReducers({\r\n    initialData,\r\n    infoFormState,\r\n    filterValues,\r\n    sortValues,\r\n    currentPage\r\n});\r\n","import {SET_Current_Page} from \"../actions/actionTypes\";\r\n\r\n\r\nconst initialState = 1\r\n\r\n\r\nexport default function currentPage(state = initialState, action) {\r\n    switch (action.type) {\r\n        case SET_Current_Page:\r\n            return action.payload;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","import { createStore, applyMiddleware } from \"redux\";\r\nimport { Provider } from \"react-redux\";\r\nimport rootReducer from \"./rootReducer\";\r\n\r\nconst loggerMiddleware = (store) => (next) => (action) => {\r\n  const result = next(action);\r\n  console.log(\"Middleware\", store.getState());\r\n  return result;\r\n};\r\nconst store = createStore(rootReducer, applyMiddleware(loggerMiddleware));\r\n\r\nconst ProviderBox = (props) =>{\r\n  return <Provider store={store}>\r\n    {props.children}\r\n  </Provider>\r\n}\r\nexport default ProviderBox;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport ReduxProvider from \"./redux/provider\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <ReduxProvider>\n            <App/>\n        </      ReduxProvider>\n\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}